from random import choice
from discord.colour import Color
from discord.embeds import Embed
from discord_components import Select, Button, DiscordComponents, interaction, ActionRow, SelectOption
from discord_components.component import ButtonStyle

from src import discordData as dData
from src.backend import handle as sData
from src.backend import hashTime
from src import cmdUtil as util
from src import discordComUse as dUse

VERSION = "‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô Beta 1.0.2 (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 4 ‡∏ï.‡∏Ñ. 64)"

dayInThai = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
             "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"]
dayColor = [Color.red(), Color.gold(), Color.magenta(),
            Color.green(), Color.orange(), Color.blue(), Color.purple()]
monthInThai = ["‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
               "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏° ", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
               "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"]
randomWord = ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏ß‡∏±‡∏ô<day>", "‡∏ß‡∏±‡∏ô<day> ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏¢‡πå"]


async def getMessage(bot, chaID, messID):
    try:
        cha = await bot.fetch_channel(chaID)
    except:
        return None

    try:
        mess = await cha.fetch_message(messID)
    except:
        return None

    return mess


async def doDeleteLastCMDMessage(bot, thisChannelID):
    try:
        lassIdNoti = dData.getNotiMessID(thisChannelID)
        if lassIdNoti != -1:
            lastMessage = await getMessage(bot, thisChannelID, lassIdNoti)
            await lastMessage.delete()
    except:
        pass

    try:
        lastMessage = await getMessage(bot, thisChannelID, dData.getMessID(thisChannelID))
        await lastMessage.delete()
    except:
        pass


async def delAllPrevMess(bot, thisChannelID):
    datas = dData.getPrevMess(thisChannelID)
    for m in datas:
        try:
            lastMessage = await getMessage(bot, thisChannelID, m)
            await lastMessage.delete()
        except:
            pass
    dData.clearPrevMess(thisChannelID)


async def messageOfContent(chan):
    thisChanId = chan.id
    dyna = dData.getDyna(thisChanId)
    if dyna == -1:
        return None
    elif dyna[1] == -1:
        return None

    if dyna[0] == "Day":
        dayOfTheWeek = dyna[1]
        thisMenuEmbed = Embed(
            title=f"‡∏ß‡∏±‡∏ô{dayInThai[dayOfTheWeek]}",
            description=f"‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {sData.getNSubjectOfDay(thisChanId,dayOfTheWeek)} ‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
            colour=dayColor[dayOfTheWeek])

        datas = sData.getSubjectOfDay(thisChanId, dayOfTheWeek)
        for d in datas:
            thisMenuEmbed.add_field(
                name=f"[{dUse.fromTerzTimeToStr(hashTime.hashBack(d[0]))}] {d[1][0]}", value=str(d[1][1]), inline=False)
        return await chan.send(embed=thisMenuEmbed)
    else:
        timeHased = dyna[1]
        dayOfTheWeek = dData.getDayOfWeek()
        datas = sData.getDataFromTimeUser(thisChanId, timeHased)
        thisMenuEmbed = Embed(
            title=f"{datas[0]}",
            description=f"{dUse.fromTerzTimeToStr(hashTime.hashBack(timeHased))}",
            colour=dayColor[dayOfTheWeek])
        thisMenuEmbed.add_field(name="‡∏•‡∏¥‡πâ‡∏á", value=datas[1])

        try:
            x = await chan.send(embed=thisMenuEmbed, components=[
                Button(
                    label="‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
                    style=ButtonStyle.URL,
                    url=datas[1],
                    emoji="üîó"
                )
            ])
        except:
            x = await chan.send(embed=thisMenuEmbed)
        return x


async def menuCmdCommand(chan):
    thisChanId = chan.id
    dayOfWeek = dData.getDayOfWeek()
    if dayOfWeek == -1:
        return await chan.send(":clock1:**‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå(‡∏´‡πâ‡∏≠‡∏á)‡πÄ‡∏£‡∏µ‡∏¢‡∏ô**:clock1:\n \\* ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ\n*‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ : ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥*",
                               components=dUse.getMenuComponents(thisChanId))
    else:
        date = dData.getDMY()
        thisMenuEmbed = Embed(
            title=choice(randomWord).replace("<day>", dayInThai[dayOfWeek]),
            description=f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date[0]} {monthInThai[date[1]-1]} ‡∏õ‡∏µ {date[2]+543}",
            colour=dayColor[dayOfWeek])
        thisMenuEmbed.add_field(name="üìö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                                value=f"‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {sData.getNSubject(thisChanId)} ‡∏ß‡∏¥‡∏ä‡∏≤")
        thisMenuEmbed.add_field(name="üìï ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
                                value=f"‡∏°‡∏µ {sData.getNSubjectOfDay(thisChanId,dayOfWeek)} ‡∏ß‡∏¥‡∏ä‡∏≤")
        thisMenuEmbed.add_field(name="üí¨ ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value=dData.isNotiDay(
            thisChanId) and "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å ‡πÜ ‡∏ß‡∏±‡∏ô" or "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å ‡πÜ ‡∏ß‡∏¥‡∏ä‡∏≤")
        thisMenuEmbed.add_field(name="üèñ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", value=dData.getVacation(
            thisChanId) == 0 and "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥" or f"‡∏ß‡∏π‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏µ‡∏Å {dData.getVacation(thisChanId)} ‡∏ß‡∏±‡∏ô")
        thisMenuEmbed.set_footer(text=VERSION)

        return await chan.send(":clock1:**‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå(‡∏´‡πâ‡∏≠‡∏á)‡πÄ‡∏£‡∏µ‡∏¢‡∏ô**:clock1:\n \\* ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ\n*‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ : ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥*",
                               embed=thisMenuEmbed,
                               components=dUse.getMenuComponents(thisChanId))


async def callFlow(idFlow, bot, thisChannelID, dlcc=None):
    global dayInThai
    thisChannel = await bot.fetch_channel(thisChannelID)
    if idFlow == "callSchedule":
        if dData.isExistID(thisChannelID):
            # Like reset
            dData.setState(thisChannelID, "idle")
            dData.makeNewKey(thisChannelID)
            dData.setTemp(thisChannelID, [])
            await doDeleteLastCMDMessage(bot, thisChannelID)
            thisMes = await messageOfContent(thisChannel)
            if thisMes:
                dData.setNotiMessID(thisChannelID, thisMes.id)
            thisMes = await menuCmdCommand(thisChannel)
            dData.setMessID(thisChannelID, thisMes.id)
        else:
            thisMes = await messageOfContent(thisChannel)
            if thisMes:
                dData.setNotiMessID(thisChannelID, thisMes.id)
            thisMes = await menuCmdCommand(thisChannel)
            dData.createNewID(thisChannelID, thisMes.id)
    elif idFlow == "deleteChan":
        if dData.isExistID(thisChannelID):
            dData.setState(thisChannelID, "delChan_Con")
            pKey = dData.makeNewKey(thisChannelID) + ":"
            thisEmbed = Embed(title="‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ",
                              description="‡∏´ ‡∏≤ ‡∏¢ ‡πÑ ‡∏õ", colour=Color.dark_red())
            thisEmbed.add_field(
                name="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á", value="‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô(‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà)", inline=False)
            thisEmbed.add_field(name="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
                                value="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ", inline=False)
            m = await thisChannel.send("**üí•üí•‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡πÅ‡∏ä‡∏•‡πÄ‡∏ô‡∏•‡∏ô‡∏µ‡πâüí•üí•**\n‡∏´‡∏≤‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
                                       embed=thisEmbed,
                                       components=[ActionRow(
                                           Button(
                                               label="‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á!!!",
                                               custom_id=pKey + "delChan_Bye",
                                               style=ButtonStyle.red,
                                               emoji="üí•"),
                                           dUse.backToMenu(pKey)
                                       )])
            dData.addMessageId(thisChannelID, m.id)
        else:
            await thisChannel.send("‡πÄ ‡∏õ‡πá ‡∏ô ‡πÑ ‡∏õ ‡πÑ ‡∏°‡πà ‡πÑ ‡∏î‡πâ")
    elif idFlow == "byebye":
        dData.makeNewKey()
        await doDeleteLastCMDMessage(bot, thisChannelID)
        await delAllPrevMess(bot, thisChannelID)
        dData.removeID(thisChannelID)
        sData.delAllTime(thisChannelID)
        await thisChannel.send(":boom:**‡∏•‡∏ö‡πÅ‡∏ä‡∏•‡πÄ‡∏ô‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢**:boom:\n‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á *(‡∏ã‡∏∂‡∏°...)*")
    elif idFlow == "justReload":
        await doDeleteLastCMDMessage(bot, thisChannelID)
        thisMes = await messageOfContent(thisChannel)
        if thisMes:
            dData.setNotiMessID(thisChannelID, thisMes.id)
        thisMes = await menuCmdCommand(thisChannel)
        dData.setMessID(thisChannelID, thisMes.id)
    elif idFlow == "forceReload":
        await thisChannel.send("-"*50)
        dData.setState(thisChannelID, "idle")
        dData.makeNewKey(thisChannelID)
        dData.setTemp(thisChannelID, [])
        await thisChannel.send("üîÅ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πàüîÅ")
        await doDeleteLastCMDMessage(bot, thisChannelID)
        thisMes = await messageOfContent(thisChannel)
        if thisMes:
            dData.setNotiMessID(thisChannelID, thisMes.id)
        thisMes = await menuCmdCommand(thisChannel)
        dData.setMessID(thisChannelID, thisMes.id)
    elif idFlow == "backToIdle":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "idle")
        dData.setTemp(thisChannelID, [])
        dData.makeNewKey(thisChannelID)
        await doDeleteLastCMDMessage(bot, thisChannelID)
        thisMes = await messageOfContent(thisChannel)
        if thisMes:
            dData.setNotiMessID(thisChannelID, thisMes.id)
        thisMes = await menuCmdCommand(thisChannel)
        dData.setMessID(thisChannelID, thisMes.id)

    elif idFlow == "Sche_call":

        for i in range(7):
            dayOfTheWeek = i
            datas = sData.getSubjectOfDay(thisChannelID, dayOfTheWeek)
            if datas:
                thisMenuEmbed = Embed(
                    title=f"‡∏ß‡∏±‡∏ô{dayInThai[dayOfTheWeek]}",
                    description=f"‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(datas)} ‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
                    colour=dayColor[dayOfTheWeek])

                for d in datas:
                    thisMenuEmbed.add_field(
                        name=f"[{dUse.fromTerzTimeToStr(hashTime.hashBack(d[0]))}] {d[1][0]}", value=str(d[1][1]), inline=False)
                await thisChannel.send(embed=thisMenuEmbed)

        await callFlow("justReload", bot, thisChannelID)

    # ? ADDD

    elif idFlow == "Add_SelSub":
        dData.setState(thisChannelID, "Add_SelSub")
        pKey = dData.makeNewKey(thisChannelID) + ":"
        m = await thisChannel.send("**+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ / ‡πÄ‡∏ß‡∏•‡∏≤ +**\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤",
                                   components=[
                                       dUse.makeSelectSubject(
                                           thisChannelID, pKey+"add_SelectSubject",
                                           [("+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà", "!!TheNewOneeeeeeeeeeeeeee!!", "‚ûï")]),
                                       dUse.backToMenu(pKey)
                                   ])
        dData.addMessageId(thisChannelID, m.id)
    elif idFlow == "Add_Sub" or idFlow == "Add_Sub2":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, idFlow)
        await thisChannel.send(":speech_balloon:‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)\n*‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢*")

    elif idFlow == "Add_Link" or idFlow == "Add_LinkBP":
        # * Use dlc as curSubject
        if idFlow == "Add_Link":
            curSubject = dlcc
            dData.setTempInd(thisChannelID, 0, curSubject)
        else:
            curSubject = dData.getTemp(thisChannelID)[0]

        dData.setState(thisChannelID, "Add_Link")
        await thisChannel.send(
            f":closed_book: **‡∏ß‡∏¥‡∏ä‡∏≤ `{curSubject}`**\n:speech_balloon: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏¢\n*‡∏Ç‡∏≠‡πÅ‡∏Ñ‡πà‡∏•‡∏¥‡πâ‡∏á‡∏Å‡πá‡∏û‡∏≠*")

    elif idFlow == "Add_SubCon" or idFlow == "Add_SubConBP":
        await delAllPrevMess(bot, thisChannelID)
        if idFlow == "Add_SubCon":
            # * Use dlc as curLink
            curLink = dlcc
            dData.setTempInd(thisChannelID, 1, curLink)
            newTemp = dData.getTemp(thisChannelID)
        else:
            # * Use dlc as curSubject
            curSubject = dlcc
            newTemp = dData.getTemp(thisChannelID)
            newTemp[0] = curSubject
            dData.setTemp(thisChannelID, newTemp)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        dData.setState(thisChannelID, "Add_SubCon")

        menus = ActionRow(
            dUse.acceptButton(pKey+"add_sub_OK"),
            dUse.anyButton(pKey+"add_sub_editSub", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤", "üìï"),
            dUse.anyButton(pKey+"add_sub_editLink", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏¥‡πâ‡∏á", "üîó"),
        )
        try:
            m = await thisChannel.send(
                f"**‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**\n‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ",
                embed=Embed(
                    title=newTemp[0],
                    description=newTemp[1], colour=Color.random()),
                components=[ActionRow(
                    Button(
                        label="‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
                        style=ButtonStyle.URL,
                        url=newTemp[1],
                        emoji="üîó")
                ), menus])
        except:
            m = await thisChannel.send(
                f"**‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**\n‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ",
                embed=Embed(
                    title=newTemp[0],
                    description=newTemp[1], colour=Color.random()),
                components=[menus])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Add_AllTime":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Add_AllTime")
        newTemp = dData.getTemp(thisChannelID)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        thisEm = dUse.getEmbedAllTimeFromSubject(
            thisChannelID, newTemp[0], newTemp[1])
        m = await thisChannel.send(
            f"**‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ...**",
            embed=thisEm,
            components=[ActionRow(
                dUse.backToMenu(pKey),
                dUse.anyButton(pKey+"add_time_add", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "üïí")
            )])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Add_NewDay":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Add_NewDay")
        pKey = dData.makeNewKey(thisChannelID) + ":"
        dayInThai = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
                     "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"]
        m = await thisChannel.send(
            f":calendar_spiral:**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô**:calendar_spiral:",
            components=[ActionRow(
                dUse.anyButton(pKey+"add_NewDay_0", "‡∏ß‡∏±‡∏ô"+dayInThai[0], "üïí"),
                dUse.anyButton(pKey+"add_NewDay_1", "‡∏ß‡∏±‡∏ô"+dayInThai[1], "üïí"),
                dUse.anyButton(pKey+"add_NewDay_2", "‡∏ß‡∏±‡∏ô"+dayInThai[2], "üïí")),
                ActionRow(
                dUse.anyButton(pKey+"add_NewDay_3", "‡∏ß‡∏±‡∏ô"+dayInThai[3], "üïí"),
                dUse.anyButton(pKey+"add_NewDay_4", "‡∏ß‡∏±‡∏ô"+dayInThai[4], "üïí"),
                dUse.anyButton(pKey+"add_NewDay_5", "‡∏ß‡∏±‡∏ô"+dayInThai[5], "üïí"),
                dUse.anyButton(pKey+"add_NewDay_6", "‡∏ß‡∏±‡∏ô"+dayInThai[6], "üïí"),
            )])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Add_NewTime":
        await delAllPrevMess(bot, thisChannelID)
        dData.setTempInd(thisChannelID, 2, dlcc)
        ttemp = dData.getTemp(thisChannelID)
        dData.setState(thisChannelID, "Add_NewTime")
        dayInThai = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
                     "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"]

        await thisChannel.send(
            f":clock3:‡∏ß‡∏¥‡∏ä‡∏≤ `{ttemp[0]}` ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å ‡πÜ `‡∏ß‡∏±‡∏ô{dayInThai[dlcc]}` ‡∏ï‡∏≠‡∏ô‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á??\n" +
            "* - ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ `xx:xx` ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢*\n" +
            "* - ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 5 ‡∏•‡∏á‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 0:00 0:05 0:10 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô*")

    elif idFlow == "Add_NewTimeCon":
        dData.setTempInd(thisChannelID, 3, dlcc[0]*12 + dlcc[1]//5)
        curTemp = dData.getTemp(thisChannelID)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        dData.setState(thisChannelID, "Add_NewTimeCon")

        newHash = curTemp[3] + curTemp[2] * 288
        textTime = hashTime.hashBack(
            newHash)[0] + " " + hashTime.hashBack(newHash)[1]

        menus = ActionRow(
            dUse.acceptButton(pKey+"add_newTimeCon_OK"),
            dUse.anyButton(pKey+"add_newTimeCon_edit", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤", "üïô")
        )
        m = await thisChannel.send(
            f"‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏π‡∏Å‡πÑ‡∏´‡∏°????",
            embed=Embed(
                title=curTemp[0],
                description=textTime, colour=Color.random()),
            components=[menus])
        dData.addMessageId(thisChannelID, m.id)

    # ? Edit Goes hereeeee

    elif idFlow == "Edi_SelSub":
        dData.setState(thisChannelID, "Edi_SelSub")
        pKey = dData.makeNewKey(thisChannelID) + ":"
        m = await thisChannel.send("**üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ / ‡πÄ‡∏ß‡∏•‡∏≤ +**\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
                                   components=[
                                       dUse.makeSelectSubject(
                                           thisChannelID, pKey+"edi_SelectSubject"),
                                       dUse.backToMenu(pKey)
                                   ])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Edi_Sub":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Edi_Sub")
        newTemp = dData.getTemp(thisChannelID)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        thisEm = dUse.getEmbedAllTimeFromSubject(
            thisChannelID, newTemp[0], newTemp[1])
        m = await thisChannel.send(
            f"**‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏´‡∏ô...**",
            embed=thisEm,
            components=[ActionRow(
                dUse.backToMenu(pKey),
                dUse.anyButton(pKey+"edit_sub_subj", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤", "üìï"),
                dUse.anyButton(pKey+"edit_sub_link", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏¥‡πâ‡∏á", "üîó"),
                dUse.anyButton(pKey+"edit_sub_Time", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤", "üïû"),
            )])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Edi_ChaSub":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Edi_ChaSub")
        await thisChannel.send(f":speech_balloon:‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ {dData.getTempInd(thisChannelID, 0)} (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)")

    elif idFlow == "Edi_ChaLink":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Edi_ChaLink")
        curSubject = dData.getTempInd(thisChannelID, 0)
        await thisChannel.send(
            f":closed_book: **‡∏ß‡∏¥‡∏ä‡∏≤ `{curSubject}`**\n:speech_balloon: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏¢\n*‡∏Ç‡∏≠‡πÅ‡∏Ñ‡πà‡∏•‡∏¥‡πâ‡∏á‡∏Å‡πá‡∏û‡∏≠*")

    elif idFlow == "Edi_ChaTime":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Edi_ChaTime")
        curSubject = dData.getTempInd(thisChannelID, 0)
        allTimes = sData.getTimesfromSubject(thisChannelID, curSubject, False)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        thisOptions = []
        for tim in allTimes:
            timeText = hashTime.hashBack(tim)
            thisOptions.append(SelectOption(
                label=f"{dUse.fromTerzTimeToStr(timeText)}", value=tim))

        m = await thisChannel.send(
            f"**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...**",
            embed=dUse.getEmbedAllTimeFromSubject(
                thisChannelID, curSubject),
            components=[ActionRow(
                dUse.anyButton(pKey+"edit_chaTimSub",
                               "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "‚Ü©"),

            ), Select(
                placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
                options=thisOptions,
                custom_id=pKey+"edit_chaTime"
            )])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Edi_ChaTimeDay":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Edi_ChaTimeDay")
        pKey = dData.makeNewKey(thisChannelID) + ":"
        dayInThai = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
                     "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"]
        fromDay = hashTime.hashBack(
            dData.getTempInd(thisChannelID, 2))[0]
        m = await thisChannel.send(
            f":calendar_spiral:**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å`{fromDay}`**:calendar_spiral:",
            components=[ActionRow(
                dUse.anyButton(pKey+"edi_chaTimeDay_0",
                               "‡∏ß‡∏±‡∏ô"+dayInThai[0], "üïí"),
                dUse.anyButton(pKey+"edi_chaTimeDay_1",
                               "‡∏ß‡∏±‡∏ô"+dayInThai[1], "üïí"),
                dUse.anyButton(pKey+"edi_chaTimeDay_2", "‡∏ß‡∏±‡∏ô"+dayInThai[2], "üïí")),
                ActionRow(
                dUse.anyButton(pKey+"edi_chaTimeDay_3",
                               "‡∏ß‡∏±‡∏ô"+dayInThai[3], "üïí"),
                dUse.anyButton(pKey+"edi_chaTimeDay_4",
                               "‡∏ß‡∏±‡∏ô"+dayInThai[4], "üïí"),
                dUse.anyButton(pKey+"edi_chaTimeDay_5",
                               "‡∏ß‡∏±‡∏ô"+dayInThai[5], "üïí"),
                dUse.anyButton(pKey+"edi_chaTimeDay_6",
                               "‡∏ß‡∏±‡∏ô"+dayInThai[6], "üïí"),
            )])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Edi_ChaTimeTime":
        await delAllPrevMess(bot, thisChannelID)

        subJ = dData.getTempInd(thisChannelID, 0)
        fromTime = hashTime.hashBack(dData.getTempInd(thisChannelID, 2))
        dData.setState(thisChannelID, "Edi_ChaTimeTime")
        dayInThai = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
                     "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"]
        newDay = dayInThai[dData.getTempInd(thisChannelID, 3)]

        await thisChannel.send(
            f":clock3:‡∏ß‡∏¥‡∏ä‡∏≤ `{subJ}`...\n‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô `{dUse.fromTerzTimeToStr(fromTime)}`\n‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô `‡∏ß‡∏±‡∏ô{newDay}` ‡πÄ‡∏ß‡∏•‡∏≤...?\n" +
            "* - ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ `xx:xx` ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢*\n" +
            "* - ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 5 ‡∏•‡∏á‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 0:00 0:05 0:10 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô*")

    elif idFlow == "Rem_SelSub":
        dData.setState(thisChannelID, "Rem_SelSub")
        await delAllPrevMess(bot, thisChannelID)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        m = await thisChannel.send("**‚úÇ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ / ‡πÄ‡∏ß‡∏•‡∏≤ +**\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
                                   components=[
                                       dUse.makeSelectSubject(
                                           thisChannelID, pKey+"rem_SelectSubject",
                                           [("‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤!!!!", "!!RRREEEEMMMMOOvEEEEEEALL!!!", "üí•")]),
                                       dUse.backToMenu(pKey)
                                   ])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Rem_AllSubCon":
        dData.setState(thisChannelID, "Rem_AllSubCon")
        await delAllPrevMess(bot, thisChannelID)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        m = await thisChannel.send("**üí•üí•‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏∏‡∏Å ‡πÜ ‡∏ß‡∏¥‡∏ä‡∏≤üí•üí•**\n‡∏´‡∏≤‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
                                   components=[ActionRow(
                                       Button(
                                           label="‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö!!!",
                                           custom_id=pKey + "rem_allSubCon_Remove",
                                           style=ButtonStyle.red,
                                           emoji="üí•"),
                                       dUse.anyButton(pKey + "rem_allSubCon_cancel",
                                                      "‡∏¢‡∏±‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏ö", "‚Ü©")
                                   )])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Rem_Sub":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Rem_Sub")
        newTemp = dData.getTemp(thisChannelID)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        thisEm = dUse.getEmbedAllTimeFromSubject(
            thisChannelID, newTemp[0], newTemp[1])
        m = await thisChannel.send(
            f"**‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏´‡∏ô...**",
            embed=thisEm,
            components=[ActionRow(
                dUse.anyButton(pKey+"rem_sub_back", "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", "‚Ü©"),
                dUse.anyButton(pKey+"rem_sub_subj", "‡∏•‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤", "üìï"),
                dUse.anyButton(pKey+"rem_sub_Time", "‡∏•‡∏ö‡πÄ‡∏ß‡∏•‡∏≤", "üïû"),
            )])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Rem_SubCon":
        dData.setState(thisChannelID, "Rem_SubCon")
        await delAllPrevMess(bot, thisChannelID)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        thisSub = dData.getTempInd(thisChannelID, 0)
        m = await thisChannel.send(f"**üí•‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤ `{thisSub}`üí•**\n‡∏´‡∏≤‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
                                   components=[ActionRow(Button(
                                       label="‡∏•‡∏ö!!",
                                       custom_id=pKey + "rem_subCon_Remove",
                                       style=ButtonStyle.red,
                                       emoji="üí•"),
                                       dUse.anyButton(pKey + "rem_subCon_cancel",
                                                      "‡∏¢‡∏±‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏ö", "‚Ü©")
                                   )
                                   ])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "Rem_SelTimeSub":
        await delAllPrevMess(bot, thisChannelID)
        dData.setState(thisChannelID, "Rem_SelTimeSub")
        curSubject = dData.getTempInd(thisChannelID, 0)
        allTimes = sData.getTimesfromSubject(thisChannelID, curSubject, False)
        pKey = dData.makeNewKey(thisChannelID) + ":"
        thisOptions = []
        for tim in allTimes:
            timeText = hashTime.hashBack(tim)
            thisOptions.append(SelectOption(
                label=f"{dUse.fromTerzTimeToStr(timeText)}", value=tim))

        m = await thisChannel.send(
            f"**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö...**\n*‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£**‡∏•‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!!!!***",
            embed=dUse.getEmbedAllTimeFromSubject(
                thisChannelID, curSubject),
            components=[ActionRow(
                dUse.anyButton(pKey+"rem_selTimeSub_back",
                               "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏ß‡∏¥‡∏ä‡∏≤", "‚Ü©"),

            ), Select(
                placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö",
                options=thisOptions,
                custom_id=pKey+"rem_selTimeSub_rem"
            )])
        dData.addMessageId(thisChannelID, m.id)

    elif idFlow == "tog_vaca":
        isVaca = dlcc
        dData.setState(thisChannelID, "Tog_vaca")
        pKey = dData.makeNewKey(thisChannelID) + ":"

        if isVaca:
            m = await thisChannel.send("üéâ‡πÄ‡∏¢‡πà ‡πÜ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô",
                                       components=[
                                           dUse.backToMenu(pKey),
                                           Select(
                                               placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô",
                                               options=[
                                                   SelectOption(
                                                       label="1 ‡∏ß‡∏±‡∏ô", value="1"),
                                                   SelectOption(
                                                       label="2 ‡∏ß‡∏±‡∏ô", value="2"),
                                                   SelectOption(
                                                       label="3 ‡∏ß‡∏±‡∏ô", value="3"),
                                                   SelectOption(
                                                       label="4 ‡∏ß‡∏±‡∏ô", value="4"),
                                                   SelectOption(
                                                       label="5 ‡∏ß‡∏±‡∏ô", value="5"),
                                                   SelectOption(
                                                       label="6 ‡∏ß‡∏±‡∏ô", value="6"),
                                                   SelectOption(
                                                       label="1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", value="7"),
                                                   SelectOption(
                                                       label="2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", value="14"),
                                                   SelectOption(
                                                       label="3 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", value="21"),
                                                   SelectOption(
                                                       label="1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", value="30"),
                                                   SelectOption(
                                                       label="2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", value="60"),
                                                   SelectOption(
                                                       label="3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", value="90"),
                                               ],
                                               custom_id=pKey+"tog_vaca"
                                           )
                                       ])
            dData.addMessageId(thisChannelID, m.id)
        else:
            await thisChannel.send("üíß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°")
            dData.setVacation(thisChannelID, 0)
            await callFlow("backToIdle", bot, thisChannelID)

    elif idFlow == "tog_noti":
        newMode = dData.toggleNotiMode(thisChannelID)
        expP = newMode == "Subject" and "‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤" or "‡∏ß‡∏±‡∏ô"
        await thisChannel.send(f"üí¨‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô `{expP}`")
        await callFlow("backToIdle", bot, thisChannelID)
